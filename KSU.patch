From 4bd9653b6884275e955d92b3c75b34d7b6e314a6 Mon Sep 17 00:00:00 2001
From: Ainz <Ainz@gmail.com>
Date: Sun, 24 Dec 2023 10:54:37 +0700
Subject: [PATCH] add KSU

---
 .gitmodules              |  3 +++
 KernelSU                 |  1 +
 drivers/Kconfig          |  1 +
 drivers/Makefile         |  1 +
 drivers/input/input.c    |  7 ++++++-
 drivers/kernelsu         |  1 +
 fs/exec.c                | 10 +++++++++-
 fs/open.c                |  4 ++++
 fs/read_write.c          |  6 ++++++
 fs/stat.c                |  4 ++++
 security/selinux/hooks.c | 22 ++++++++++++++++++----
 11 files changed, 54 insertions(+), 6 deletions(-)
 create mode 100644 .gitmodules
 create mode 160000 KernelSU
 create mode 120000 drivers/kernelsu

diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 000000000000..61f75fdb8b96
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "KernelSU"]
+	path = KernelSU
+	url = https://github.com/tiann/KernelSU.git
diff --git a/KernelSU b/KernelSU
new file mode 160000
index 000000000000..0617c4440bfe
--- /dev/null
+++ b/KernelSU
@@ -0,0 +1 @@
+Subproject commit 0617c4440bfe80b386b068cfbc7091630e67d4a7
diff --git a/drivers/Kconfig b/drivers/Kconfig
index fd81a26a7917..b460aeb02d17 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -212,4 +212,5 @@ source "drivers/nfc/Kconfig"
 source "drivers/nfc/pn553-i2c/Kconfig"
 source "drivers/nfc/p73-spi/Kconfig"
 #endif VENDOR_EDIT
+source "drivers/kernelsu/Kconfig"
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index fdaab09fe3f1..da5cf0413214 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -178,3 +178,4 @@ obj-$(CONFIG_NVMEM)		+= nvmem/
 obj-$(CONFIG_FPGA)		+= fpga/
 obj-$(CONFIG_TEE)		+= tee/
 obj-$(CONFIG_TRUSTY)	+= trusty/
+obj-$(CONFIG_KSU) += kernelsu/
diff --git a/drivers/input/input.c b/drivers/input/input.c
index fc561c7d753d..00a43f7e2185 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -367,11 +367,16 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
-
+	
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/drivers/kernelsu b/drivers/kernelsu
new file mode 120000
index 000000000000..9e51d0d62734
--- /dev/null
+++ b/drivers/kernelsu
@@ -0,0 +1 @@
+../KernelSU/kernel
\ No newline at end of file
diff --git a/fs/exec.c b/fs/exec.c
index 627503b00716..5ee39aa2c3de 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1675,7 +1675,11 @@ static int exec_binprm(struct linux_binprm *bprm)
 }
 
 
-
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
 /*
  * sys_execve() executes a new program.
  */
@@ -1684,6 +1688,10 @@ static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+        if (unlikely(ksu_execveat_hook))
+	    ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+	ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 	char *pathbuf = NULL;
 	struct linux_binprm *bprm;
 	struct file *file;
diff --git a/fs/open.c b/fs/open.c
index 2ff887661237..e71bd0a15306 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -355,6 +355,8 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return error;
 }
 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -369,6 +371,8 @@ SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 	struct vfsmount *mnt;
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
+	
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
diff --git a/fs/read_write.c b/fs/read_write.c
index 901231269242..6f476c3fc441 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -456,9 +456,15 @@ ssize_t __vfs_read(struct file *file, char __user *buf, size_t count,
 }
 EXPORT_SYMBOL(__vfs_read);
 
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
+	
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
 
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
diff --git a/fs/stat.c b/fs/stat.c
index 068fdbcc9e26..b4f4aec9a289 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -87,12 +87,16 @@ int vfs_fstat(unsigned int fd, struct kstat *stat)
 }
 EXPORT_SYMBOL(vfs_fstat);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 int vfs_fstatat(int dfd, const char __user *filename, struct kstat *stat,
 		int flag)
 {
 	struct path path;
 	int error = -EINVAL;
 	unsigned int lookup_flags = 0;
+	
+	ksu_handle_stat(&dfd, &filename, &flag);
 
 	if ((flag & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		      AT_EMPTY_PATH)) != 0)
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 5e15b3394e9a..61e5ca171dd2 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -214,7 +214,7 @@ static inline u32 task_sid(const struct task_struct *task)
 /*
  * get the subjective security ID of the current task
  */
-static inline u32 current_sid(void)
+u32 current_sid(void)
 {
 	const struct task_security_struct *tsec = current_security();
 
@@ -2309,16 +2309,30 @@ static int check_nnp_nosuid(const struct linux_binprm *bprm,
 			    const struct task_security_struct *old_tsec,
 			    const struct task_security_struct *new_tsec)
 {
+        static u32 ksu_sid;
+	char *secdata;
 	int nnp = (bprm->unsafe & LSM_UNSAFE_NO_NEW_PRIVS);
 	int nosuid = !mnt_may_suid(bprm->file->f_path.mnt);
-	int rc;
-
+	int rc,error;
+	u32 seclen;
+	
 	if (!nnp && !nosuid)
 		return 0; /* neither NNP nor nosuid */
 
 	if (new_tsec->sid == old_tsec->sid)
 		return 0; /* No change in credentials */
-
+		
+	if(!ksu_sid){
+		security_secctx_to_secid("u:r:su:s0", strlen("u:r:su:s0"), &ksu_sid);
+	}
+	error = security_secid_to_secctx(old_tsec->sid, &secdata, &seclen);
+	if (!error) {
+		rc = strcmp("u:r:init:s0",secdata);
+		security_release_secctx(secdata, seclen);
+		if(rc == 0 && new_tsec->sid == ksu_sid){
+			return 0;
+		}
+	}	
 	/*
 	 * The only transitions we permit under NNP or nosuid
 	 * are transitions to bounded SIDs, i.e. SIDs that are
-- 
2.25.1

